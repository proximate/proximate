Terminology
===========

The terminology is presented in an order that aims to be easy to read.
This is probably the most important part of the document.
Understanding terminology helps understanding the program design
and functionality. *Read this section very carefully!*

uid::
user::
	Users are identified an *uid*, which is a 64-bit integer presented
	in hexadecimal coding: e.g. 0123456789abcdef. users are objects of
	class *User* defined in *user.py*. All users are equal.

community::
	All users belong to one or more community. All users belong to the
	'proximate' community. Other communities are optional.
	There are two major categories of communities: personal communities
	and peer communities.
	Communities are objects of class Community defined in
	*communitymeta.py*.

peer community::
	Peer community is identified by name, e.g. 'Linux'. All users belong
	to 'proximate' community. A community consists of all users who
	announce to belong to that community. This announcements comes
	from the user's 'profile'. No user can be forced to join any community,
	they do so voluntarily. A user can leave the community by simply
	not announcing membership to it. As a special exception, no one can
	leave the 'proximate' community. Fortunately one need not be	active in it.

personal community::
	 Personal community is a 'virtual' community defined by a user.
	 Its members do not see each other.
	 Only the creator of a personal community sees its members.
	 Personal community is a named collection of (personal) peers.
         Each user has one personal community by default. It is called
	 'Friends'.

bencode::
	 bencode is a serialization protocol used for remote communication.
	 Some parts of proximate use bencode. It is implemented in the
	 *bencode.py* module. It is most well known from the
	 BitTorrent protocol. For more information, see
	 http://en.wikipedia.org/wiki/Bencode

ini-file::
	Ini-file format is used for configuration files, community profiles,
	user profiles and some meta data. See link:files.html[Files] for
	more information.

trust::
	Trust is relevant in the context where some user, data, configuration
	or device can break a security policy. Trust is not relevant when
	no security policy can be broken.
	The only trusted data in the system is data generated by the
	user himself. That is, personal profile, configuration file and
	personal communities. Everything is untrusted by default. If some trust
	is required, it must come from the user. User is asked to accept any
	event that requires trust.

share::
fileshare::
	 Fileshare is a collection of files (zero or more) that is used
	 to signal asynchronous events (such as podcasts) to other users.
	 A fileshare may not have any regular files associated with it.
	 Shares are visible and accessible to all users. There are
	 no access control mechanisms. +
	 +
	 filesharing.py defines filesharing logic. Each fileshare is
	 identified by (uid, fsid) pair. Where fsid is an integer >= 0.
	 When a share is created, a new fsid is assigned to it. fsid
	 is a counter that is incremented by one everytime a share is
	 created. The first share is created with fsid == 0.
	 Tracking new shares from other users is efficient, because one
	 only needs to remember the maximum fsid value from each users to
	 know if new shares have been published. Each time a user publishes
	 a new value, his/her profile starts announcing a new max fsid
	 value. +
	 +
	 Each user can have arbitrary number of shares.
	 Each share has a property named "purpose" which defines the
	 plugin/mechanism for which the share was created. Normal regular
	 file shares have purpose="fs".
	 Plugins may register to receive notifications when shares with a
	 given purpose become visible.
	 A share with purpose="invitation" could be used to signal
	 coffee invitations for other users.
	 Users who have subscribed to purpose="invitation" will get a notice
	 when a new share with purpose="invitation" is created and announced. +
	 +
	 Published shares are remembered by default. That is, a share is
	 not forgotten when the program is quit. +
	 +
	 The share may or may not have meta data. Meta data may contain
	 a general description of the share in textual format.
	 This general description should be an understandable description
	 for other users.
	 Meta data may also link to relevant files inside the share.
	 Shares can be subscribed to based on the meta data. +
	 +
	 Examples:

	 1. Shares are individual files or directories that are visible
	 to other users. e.g. /data/music/ is shared to all users.
	 2. Shares are events that are notified asynchronously to other
	 users. Share with purpose="invitation" implies an invitation
	 to other users for some event. This share may have a greeting
	 card picture inside it ("welcome.jpg").

content::
	 Content is anything that is published for other users. Content
	 can have associated meta data with it. Meta data is explicitly
	 given by the user, or comes automatically with downloaded content.
	 Content is tagged with file specific meta data that is defined
	 in content.py class named Content_Meta and share meta which
	 is meta data related to a file share.

messaging::
	Users may create and join arbitrary communities in which they can
	send and receive messages (chat). Messages are relayed from user to
	user with peer-to-peer principle. There is no privacy or trust in
	the messaging system, so messages may not be trusted.

Executive summary of Proximate:

Proximate is a peer-to-peer network of users that are each identified by an
uid that is a 64 bit hexadecimal integer. All users are equal.  There
are no central servers. Users share their profiles. Users may join and
create communities. Users can chat in communities. Users can share files
through file shares. Asynchronous events are signalled with file shares,
be they actual files or not. Each user's state is tracked by a single
integer that is an incrementing counter that identifies the version of
user's profile. Tracking user updates means tracking that counter.
Tracking user's file shares follow recursively from that counter.
File shares are published with a similar counter too.
